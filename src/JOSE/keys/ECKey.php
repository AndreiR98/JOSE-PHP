<?php

namespace JOSE\keys;

use ECDSA\Algorithms;
use ECDSA\curves\Curves;
use ECDSA\Key;
use ECDSA\keys\PrivateKey;
use ECDSA\keys\PublicKey;
use ECDSA\Math;
use ECDSA\points\ECpoint;
use ECDSA\points\Point;
use Exception;

class ECKey extends Key {
    private PrivateKey $privateKey;

    private PublicKey $publicKey;

    private Curves $curve;

    private Algorithms $algorithm;

    function __construct(Curves $curves, Algorithms $algorithm){
        $this->curve = $curves;
        $this->algorithm = $algorithm;
    }

    public function getKeyType() : KeyTypes {
        return KeyTypes::EC;
    }

    public function getCurve(): Curves
    {
        return $this->curve; // TODO: Change the autogenerated stub
    }

    /**
     * @return Algorithms
     */
    public function getAlgorithm(): Algorithms
    {
        return $this->algorithm;
    }

    public function fromPemFormat(String $pem): void {
        if(openssl_pkey_get_private($pem)){
            try {
                $res = openssl_pkey_get_private($pem);

                $key_res = openssl_pkey_get_details($res)['ec'];

                if($key_res['curve_name'] == $this->curve->getNistName()){
                    $this->privateKey = new PrivateKey(Math::hexlify($key_res['d']), $this->curve, $this->algorithm);

                    $publicKey = $this->privateKey->getPublicKey();

                    if(($publicKey->getAffine()->getX() == Math::hex2int(Math::hexlify($key_res['x']))) &&
                        ($publicKey->getAffine()->getY() == Math::hex2int(Math::hexlify($key_res['y'])))){
                        $this->publicKey = $this->getPrivateKey()->getPublicKey();
                    }
                }
            } catch (Exception $exception){}
        } else {
            try{
                $res = openssl_pkey_get_public($pem);

                $key_res = openssl_pkey_get_details($res)['ec'];

                $point = new Point(
                    gmp_init(Math::hexlify($key_res['x']), 16),
                    gmp_init(Math::hexlify($key_res['y']), 16),
                    gmp_init(1, 10)
                );

                $ecPoint = new ECpoint($point, $this->curve);

                $publicKey = new PublicKey($ecPoint, $this->algorithm);

                $this->publicKey = $publicKey;
            }catch (Exception $exception){}
        }
    }

    public function getPrivateKey() : PrivateKey {
        return $this->privateKey;
    }

    public function getPublicKey() : PublicKey {
        return $this->publicKey;
    }
}